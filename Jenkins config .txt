1.setup
2.integrate 
-install plugin
-configure path
3.job
======================================

Jenkins config 

create EC2 instance
 go to Jenkins download and choose redhat Linux follow instrutions
 - install epel
 -install java-17
 -install Jenkins

start Jenkins
- service Jenkins start

ui copy public ip from Jenkins server and paste on web with port no

extract Jenkins password
cat ----

login to Jenkins

Jenkins job

-new items
-build - shell - echo hello world 
-build first job

hit build now

==========================================
          Git and GitHub config.

install git on console 
add plugin GitHub

job pull code from GitHub
 
- new items 
- add Git
- add path for GitHub
save 

hit build now

=====================================

        MAVEN config

go to /opt 
download package wget maven //tar.gz
unzip tar.gz file
mv maven 3.9.6 maven

cd /opt/maven 
./mvn -v 

to set path globally

cd ~

vi .bash_profile
M2 /opt/maven/bin
M2_HOME /opt/maven
JAVA_HOME add java path

$path update

save

source .bash_profile  

echo $path

mvn -v anywhere

-----------------------------------------------------------------------------

integrating maven with Jenkins

go to Jenkins
manage Jenkins/manage plugin/available search maven integration and integrate

now we again config our Jenkins
manage/tools/add java path and add maven 

for jdk 
name java-11
java_home = /usr/lib/jvm/java-17-amazon-corretto.x86_64

for maven
name maven 3.9.6
maven_home = /opt/maven

-----------------------------------------------------------------

maven job to build and generate artifact

-new item
-description
-git 
-GitHub path
-maven goal clean install 
save 

hit build now

===================================================

                TOMCAT 

===================================================

                DOCKER 

- ec2 instance 

 SETUP tomcat container - for hosting application

- install docker 
cd  yum install docker -y
-> service docker status/start/stop

-docker images
-docker ps 
-docker ps -a

-pull tomcat image from dockerhub
 ->docker pull tomcat

- create container from tomcat image
->  docker run -d --name tomcat-container -p 8081:8080 tomcat
-> docker stop tomcat-container

-ip:8081

- will get 404 error 

-to resolve manually

-jump into ur docker container by using bin/bash

cmd -> docker exec -it tomcat-container /bin/bash

cmd cp -R * ../webapps

error fixed 

- to resolve above using docker file

vi dockerfile

vi Dockerfile

FROM tomcat:latest
RUN cp -R /usr/local/tomcat/webapps.dist/* /usr/local/tomcat/webapps

escape 
:wq

- cmd : docker build -t demotomcat .   // to build image
- docker run -d --name demotomcat-container -p 8082:8080 demotomcat    //creating demotomcat-container  for demotomcat image 

-------------------------------------------------------------------------------------------

  INTEGRATE DOCKERHOST TO JENKINS

- cat /etc/passwd // to see the user
- cat /etc/group  // to se the group

- create a user as admin and add him to docker group to perform aall the activites

 ->useradd dockeradmin
 ->passwd dockeradmin
 ->new password docker123

-add user to docker group
-> usermod -aG docker dockeradmin   

ec2 instance does not allow password based authentication , we have to explicityly enable it

cmd -> vi /etc/ssh/sshd_config

->PasswordAuthentication yes    //enable it like this
->#PasswordAuthentication no    // disable it like this

save

- service sshd reload

- open duplicate session using dockeradmin and password

- install publish over ssh plugin 
-> path manage Jenkins/ plugins / available / publish over ssh  

- configure our docker-host in Jenkins
-> manage Jenkins / systems / go below to Publish over SSH / add ssh servers 
   (because we are using password based authentication)
  add
  -> name - hostname(docker-host)
  -> hostname - private ip address of docker-host
  -> username - dockeradmin
  -> password - docker123 (under advance)
  -> test/apply and save

integration completed 

------------------------------------------------------------------

        JENKINS JOB TO BUILD THE CODE AND COPY THE ARTIFACTS ON DOCKERHOST

- once it is done then copying it to our container is easy.

- new item -> build_deploy_job -> maven -> ok
- description - git - GitHub path - pol scm - goals (clean install) ->
  post build action -> add post build action -> 
  choose Send build artifacts over SSH 
  - name autofilled 
  - source -> webapp/target/*.war
  - Remove prefix -> webapp/target
  
save 

build now
 
-------------------------------------------------------------------------




















