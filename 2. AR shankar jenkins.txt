devops notes
============

https://www.shiksha.com/online-courses/articles/what-makes-simplilearn-a-good-platform/
jenkins is a java based application.


A R Shankar

git -  local version control system
GitHub - distributed version control system
Jenkins - continuation integration tool
Maven - as a build tool
Ansible - configuration management and deployment tool
Docker - for containerization
Kubernetes - as a containers management tool

setup all these environment on AWS

=========================================================



A key pair consists of a public key that AWS stores and a private key file that you store. Together, they allow you two connect to your instances securely. For windows AMIs, the private key file is required to obtain the password used to login into your instance. For Linux AMIs, the private keys file allows you to securely SSH into your instance. Amazon EC2 supports ED25519 and RSA key pairs types.

===============================================================================================================

2.10

Set up Jenkins Server

Setup Jenkins

mobaxtrem
-----------
Download moba xterm
ec2-user
ip address - public
pem file - key downloaded during Jenkins setup
always root user

java and Jenkins setup 
----------------------

Go to Jenkins download and deploy
Choose redhat/cent os
Follow instruction and install java and Jenkins  (use video link udemy)
java -version

yum install Jenkins
copy public ip adderss and paste it in url along with port no 3.82.44.49:8080

in mobaxtterm 
sudo su -
service jenkins status/start/stop  //to start the Jenkins server 

retrieve password on Jenkins during first time login 
-------------------------------------------------------

/var/lib/jenkins/secrets/initialAdminPassword   //Jenkins default password
Go to terminal
Cat /var/lib/jenkins/secrets/initialAdminPassword
Copy the password and paste
Jenkins login password 39ce656567b94c96baef48037fce54b0
User name admin

================================================================================================

2.11
In build / execute shell
echo "Hello World"
-----------------------------------------------------
uptime
go to console type uptime – its shows it is running by how many minutes

================================================================================================

build now
2.12

Install git 
Yum install git 
Git –version
-------------------------------------

Github plugin

Manage Jenkins
Mananage plugin 
Available serach githuh check and install
Configure Jenkins
Manage Jenkins/system configuration/tools

whereis git
=================================================================

2.13

Jenkins job to pull the code from GitHub

New item
Job name
Description
Git
Path code http https://github.com/nhanand/hello-world.git
Apply and save
-------------------------------------------------------------


Go to home page and hit build now 
To check the build on console
Cd /var/lib/jenkins/workspace     default location of build

ll

=================================================================================================

2.14 

Integrating maven to Jenkins

Go to this directory in root cd /opt

https://maven.apache.org/download.cgi
Binary tar.gz archive copy link
Go to terminal 
wget https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz
enter
ll
tar.gz file 
to extract it 
tar -xvzf apache-maven-3.9.6-bin.tar.gz

mv apache-maven-3.9.6 maven


cd maven
cd bin
./mvn -v

--------------------------------------------------------------

to check maven anywhere setting the env variable
steps

cd ~ to go back to root directory 
ll -a // to check the hidden files

vi .bash_profile // edit
M2_HOME=/opt/maven   // where maven is stored
M2=/opt/maven/bin    // binary directory
M2_HOME=/usr/lib/jvm/java-11-openjdk-11.0.22.0.7-1.amzn2.0.1.x86_64   //find / -name java-11*
                                                                        /usr/lib/jvm/java-11-openjdk-11.0.22.0.7-1.amzn2.0.1.x86_64


PATH=$PATH:$HOME/bin:$JAVA_HOME:$M2_HOME:$M2
 and save


 source .bash_profile
echo $PATH

mvn -v 

------------------------------

integrating maven with Jenkins

go to Jenkins
manage
plugin
vailable 
search maven and integrate

now we again config our Jenkins
manage/tools

add java path and add maven 


==================================================================

2.15

build a java project using Jenkins

======================================================================================

3.18

setup a tom cat server

- deploy our code on tomcat server
---------------------------------------

- go to aws console and create and ec2 instance.

- copy the public ip address and launch it into browser

- login into tomcat account with ip address as like Jenkins

- go to root directory

- amazon-linux-extras // to see all remositories

- amazon-linux-extras install java-openjdk11

- check java -version

- now install topmcat on cd /opt dir in root directory

ll

extract the file 

tar -xvzf apache-tomcat-9.0.89.tar.gz
ll
mv apache-tomcat-9.0.89 tomcat

- cd tomcat
- cd bin
 in bin directory we can start our tomcat server

note startup.sh and shutdown.sh to start and stop services

note in bin dir use ./startup.sh  to start the tomcat server

- now go to browser and copy tomcat public id 54.226.182.102:8080 and start the server.

---------------------------------------------------

now we have to login to tomcat server to web ui

- use manager app 

cd ../..

- go to tomcat dir 

find / -name context.xml

/opt/tomcat/conf/context.xml
/opt/tomcat/webapps/docs/META-INF/context.xml
/opt/tomcat/webapps/examples/META-INF/context.xml
/opt/tomcat/webapps/manager/META-INF/context.xml

and update what is available on webapps (host-manager and manager)

go to vi editor 

/opt/tomcat/webapps/examples/META-INF/context.xml
/opt/tomcat/webapps/manager/META-INF/context.xml
 AND 

COMMENT THE IP ADRESSS

now 

- go to bin dir and stop the tomcat server by ./shutdown.sh

---------------------------------------------------------------------

start the server 
./ startup.sh

go to manager app it will ask for creds

- for the tomcat-user.xml req which is in tomcat/conf dir

- go to tomcat/conf dir

- go to vi tomcat-user.xml 
  
note to go end of the file shift g is used

and paste thesse

 <role rolename="manager-gui"/>
 <role rolename="manager-script"/>
 <role rolename="manager-jmx"/>
 <role rolename="manager-status"/>
 <user username="admin" password="admin" roles="manager-gui, manager-script, manager-jmx, manager-status"/>
 <user username="deployer" password="deployer" roles="manager-script"/>
 <user username="tomcat" password="s3cret" roles="manager-gui"/>

:wq

--------------------------------------------------------------------

ln -s /opt/tomcat/bin/startup.sh /usr/local/bin/tomcatup
echo $PATH   // to check the path

ln -s /opt/tomcat/bin/shutdown.sh /usr/local/bin/tomcatdown

now use 
tomcatup      to start
tomcatdown    to stop

-----------------------------------------------------

tomcatup

go to manager ui

and login  using either admin or tomcat

<user username="admin" password="admin" roles="manager-gui, manager-script, manager-jmx, manager-status"/>
 <user username="deployer" password="deployer" roles="manager-script"/>
 <user username="tomcat" password="s3cret" roles="manager-gui"/>

-----------------------------------------------------------------------

3.19 integrating tomcat with Jenkins

steps 
1. install plugin
2. configure Jenkins

-------------------------------------

- login to Jenkins

password change Jenkins

- install deploy to container plugins

   manage Jenkins/plugins/available

---------------------------------------

now need to configure tomcat with creds 

- go to manage Jenkins
- credentials/system/global credentials/add credentials

use deployer plugin creds // tom cat creds admin/deployer/tomcat

-----------------------------------------------------

go back to dashboard

- create a new job

build_and_deploy_job

under maven project

============================================

cron job is a job scheduler which triggers yours job at specific time.

poll scm- used for auto deployment. if there are changes then build go happen else not.

===============================================================================================






















 





